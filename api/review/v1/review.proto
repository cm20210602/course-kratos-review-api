syntax = "proto3";

package api.review.v1;

import "google/api/annotations.proto";
import "validate/validate.proto";

option go_package = "review-service/api/review/v1;v1";
option java_multiple_files = true;
option java_package = "api.review.v1";

// 写完 make api根据proto生成代码
/*
 validate规则可以见官方仓库 https://github.com/bufbuild/protoc-gen-validate
 写完validate后，后续的操作就是makefile（参考官方文档），然后注册参数校验中间件，是在http和grpc去server下面的对应文件里加上validate.Validator()
*/


// 定义评价服务
service Review {
    // 创建评价
    rpc CreateReview (CreateReviewRequest) returns (CreateReviewReply) {
        // grpc-gateway用到的注释，生成一个反向代理服务器，外面的http请求过来，该反向代理服务器将 RESTful HTTP API 转换为 gRPC，然后内部就走我们的grpc
        option (google.api.http) = {
            post: "/v1/review", // http接口请求的路径
            body: "*" // 请求body所有东西都转过来
        };
    };
    // C端获取评价详情
    rpc GetReview (GetReviewRequest) returns (GetReviewReply) {
        option (google.api.http) = {
            get: "/v1/review/{review_id}"
        };
    }
    // O端审核评价
    rpc AuditReview (AuditReviewRequest) returns (AuditReviewReply) {
        option (google.api.http) = {
            post: "/v1/review/audit",
            body: "*"
        };
    }
    // B端回复评价
    rpc ReplyReview (ReplyReviewRequest) returns (ReplyReviewReply) {
        option (google.api.http) = {
            post: "/v1/review/reply",
            body: "*"
        };
    }
    // B端申诉评价
    rpc AppealReview (AppealReviewRequest) returns (AppealReviewReply) {
        option (google.api.http) = {
            post: "/v1/review/appeal",
            body: "*"
        };
    }
    // O端评价申诉审核
    rpc AuditAppeal (AuditAppealRequest) returns (AuditAppealReply) {
        option (google.api.http) = {
            post: "/v1/appeal/audit",
            body: "*"
        };
    }
    // C端查看userID下所有评价
    rpc ListReviewByUserID (ListReviewByUserIDRequest) returns (ListReviewByUserIDReply) {
        option (google.api.http) = {
            get: "/v1/{user_id}/reviews",
        };
    }
}

// 创建评价的参数
message CreateReviewRequest {
    int64 user_id = 1 [(validate.rules).int64 = {gt: 0}];
    int64 order_id = 2 [(validate.rules).int64 = {gt: 0}];
    int64 store_id = 3 [(validate.rules).int64 = {gt: 0}];
    int32 score = 4 [(validate.rules).int32 = {in: [1,2,3,4,5]}];
    int32 service_score = 5 [(validate.rules).int32 = {in: [1,2,3,4,5]}];
    int32 express_score = 6 [(validate.rules).int32 = {in: [1,2,3,4,5]}];
    string content = 7 [(validate.rules).string = {min_len: 8, max_len: 255}];
    string pic_info = 8;
    string video_info = 9;
    bool anonymous = 10;
}
// 创建评价的回复
message CreateReviewReply {
    int64 review_id = 1;
}

// 获取评价详情的请求参数
message GetReviewRequest {
    int64 review_id = 1 [(validate.rules).int64 = {gt: 0}];
}

// 获取评价详情的响应
message GetReviewReply {
    ReviewInfo data = 1;
}

// 评价信息
message ReviewInfo{
    int64 review_id = 1;
    int64 user_id = 2;
    int64 order_id = 3;
    int32 score = 4;
    int32 service_score = 5;
    int32 express_score = 6;
    string content = 7;
    string pic_info = 8;
    string video_info = 9;
    int32 status = 10;
}

// 审核评价的请求
message AuditReviewRequest {
    int64 review_id = 1 [(validate.rules).int64 = {gt: 0}];
    int32 status = 2 [(validate.rules).int32 = {gt: 0}];
    string op_user = 3 [(validate.rules).string = {min_len: 2}];
    string op_reason = 4 [(validate.rules).string = {min_len: 2}];
    optional string op_remarks = 5;
}

// 审核评价的返回值
message AuditReviewReply {
    int64 review_id = 1;
    int32 status = 2;
}

// 回复评价的请求
message ReplyReviewRequest{
    int64 review_id = 1 [(validate.rules).int64 = {gt: 0}];
    int64 store_id = 2 [(validate.rules).int64 = {gt: 0}];
    string content = 3 [(validate.rules).string = {min_len: 2, max_len:200}];
    string pic_info = 4;
    string video_info = 5;
}

// 回复评价的返回值
message ReplyReviewReply{
    int64 reply_id = 1;
}

// AppealReviewRequest 申诉评价的请求参数
message AppealReviewRequest{
    int64 review_id = 1 [(validate.rules).int64 = {gt: 0}];
    int64 store_id = 2 [(validate.rules).int64 = {gt: 0}];
    string reason = 3 [(validate.rules).string = {min_len: 2, max_len:200}];
    string content = 4 [(validate.rules).string = {min_len: 2, max_len:200}];
    string pic_info = 5;
    string video_info = 6;
}

// 对评价进行申诉的返回值
message AppealReviewReply{
    int64 appeal_id = 1;
}

// 对申诉进行审核的请求
message AuditAppealRequest{
    int64 appeal_id = 1 [(validate.rules).int64 = {gt: 0}];
    int64 review_id = 2 [(validate.rules).int64 = {gt: 0}];
    int32 status = 3 [(validate.rules).int32 = {gt: 0}];
    string op_user = 4 [(validate.rules).string = {min_len: 2}];
    optional string op_remarks = 5;
}

// 对申诉进行审核的返回值
message AuditAppealReply{
}

// 用户评价列表的请求
message ListReviewByUserIDRequest{
    int64 user_id = 1 [(validate.rules).int64 = {gt: 0}];
    int32 page = 2 [(validate.rules).int32 = {gt: 0}];
    int32 size = 3 [(validate.rules).int32 = {gt: 0}];
}

// 用户评价列表的返回值
message ListReviewByUserIDReply{
    repeated ReviewInfo list = 1;
}